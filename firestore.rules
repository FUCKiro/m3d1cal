rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a document is a doctor
    function isDoctor(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'doctor';
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if resource != null && (
        isAuthenticated() || 
        resource.data.role == 'doctor'
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }
    
    // Appointments collection rules - Simplified for debugging
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
    }

    // Doctor schedules collection rules
    match /doctorSchedules/{doctorId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated() && (
        request.auth.uid == doctorId || 
        isAdmin()
      );
    }

    // Reminders collection rules
    match /reminders/{reminderId} {
      allow read, write, delete: if isAuthenticated();
    }
  }
}
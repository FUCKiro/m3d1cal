rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is a doctor
    function isDoctor() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    // Helper function to check if user is a patient
    function isPatient() {
      return request.auth != null &&
             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'patient' ||
               !('role' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data)));
    }
    
    // Allow users to read and write their own data
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if true;  // Allow public read access to all users
      allow update: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin() || 
        (isDoctor() && request.auth.uid == userId)
      );
      allow delete: if isAdmin();
    }
    
    // Allow public read access to doctor schedules
    match /doctorSchedules/{doctorId} {
      allow read: if true;
      allow create: if request.auth != null && isAdmin();
      allow update: if request.auth != null && (
        isAdmin() ||
        (isDoctor() && request.auth.uid == doctorId)
      );
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Allow authenticated users to manage their appointments
    match /appointments/{appointmentId} {
      allow create: if request.auth != null && (
        (isPatient() && request.resource.data.patientId == request.auth.uid) ||
        isAdmin()
      );
      allow read: if request.auth != null && (
        isAdmin() ||
        resource.data.patientId == request.auth.uid || 
        resource.data.doctorId == request.auth.uid
      );
      allow update: if request.auth != null && (
        isAdmin() ||
        (isPatient() && resource.data.patientId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])) ||
        resource.data.doctorId == request.auth.uid
      );
      allow delete: if request.auth != null && (
        isAdmin() ||
        (isPatient() && resource.data.patientId == request.auth.uid && resource.data.status == 'scheduled')
      );
    }
  }
}